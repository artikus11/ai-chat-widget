/**
 * Правило для показа приветственного сообщения пользователю, который ранее был активен (отправлял сообщения),
 * но ушёл и возвращается на сайт.
 *
 * Условия показа:
 * 1. Существует приветственное сообщение типа 'active_return' в категории 'out'.
 * 2. Пользователь ранее отправлял сообщение (был активен).
 * 3. Сообщение ещё не показывали этому пользователю.
 * 4. Прошёл кулдаун с момента последнего показа этого сообщения.
 * 5. Контекст — "возврат" (user returned to the site).
 * 6. Не показывается, если пользователь не был активен ранее (не отправлял сообщений).
 * 7. Не показывается, если уже показывали это сообщение.
 * 8. Не показывается, если кулдаун не истёк.
 * 9. Не показывается, если контекст не "возврат".
 * 10. Не показывается, если нет текста 'active_return' в провайдере.
 * Иначе показываем.
 */
export const ActiveReturnRule = {
    /**
     * Проверяет, соответствует ли текущее состояние пользователя условиям для показа приветственного сообщения.
     *
     * @param {Object} state - Состояние пользователя
     * @param {number|null} state.lastChatOpenTime - Временная метка последнего открытия чата (timestamp), или `null`, если никогда.
     * @param {boolean} state.hasSentMessage - Флаг, указывающий, отправлял ли пользователь сообщение.
     * @param {DecisionEngine} engine - Экземпляр движка принятия решений, содержащий провайдер сообщений и вспомогательные сервисы.
     * @param {Object} context - Дополнительный контекст, который может быть полезен для правил (например, 'outer' или 'inner').
     * @returns {string|null} Тип сообщения для показа ('welcome') или `null`, если условия не выполнены.
     */
    matches(state, engine, context) {
        const { hasSentMessage } = state;
        const { storage, cooldown } = engine.helpers;

        const type = 'active_return';
        const category = 'out';

        // 1. Существует?
        if (!engine.has(type, category)) {
            return null;
        }

        // 2. Уже показывали?
        if (storage.wasShown(type, category)) {
            return null;
        }

        // 3. Кулдаун
        if (!cooldown.canShow(type, category)) {
            return null;
        }

        // 4. Был активен ранее
        if (!hasSentMessage) {
            return null;
        }

        // 5. Только если контекст — "возврат"
        if (context !== 'return') {
            return null;
        }

        // ✅ Все условия выполнены
        return type;
    },
};
