import { sanitizeHtml } from '../utils/sanitize';
import { MESSAGES } from '@js/config';

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:
 * - in: —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç.–¥.)
 * - out: —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —á–∞—Ç–∞ (–≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
 *
 * –ö–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Ö –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏,
 * –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
 *
 * @class MessagesProvider
 */
export default class MessagesProvider {
    /**
     * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
     *
     * @param {Object} [customMessages] - –û–±—ä–µ–∫—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–æ–≤.
     *   –§–æ—Ä–º–∞—Ç: `{ in?: Object, out?: Object }`, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–∏–ø –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å `text`, `delay` –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è.
     *
     *   –ü—Ä–∏–º–µ—Ä:
     *   ```js
     *   {
     *     in: { greeting: { text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', delay: 800 } },
     *     out: { welcome: { text: 'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º?', duration: 5000 } }
     *   }
     *   ```
     *
     * @example
     * const provider = new MessagesProvider({
     *   in: { greeting: { text: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!' } },
     *   out: { welcome: { delay: 5000 } }
     * });
     */
    constructor(customMessages = {}) {
        this.messages = this.mergeWithDefaults(MESSAGES, customMessages);
    }

    /**
     * –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏.
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É defaults, –∑–∞–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ custom.
     *
     * @private
     * @param {Object} defaults - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
     * @param {Object} custom - –û–±—ä–µ–∫—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
     * @returns {Object} –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
     *
     * @description
     * –ú–µ—Ç–æ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (namespace ‚Üí type).
     * –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—è `text`.
     */
    mergeWithDefaults(defaults, custom) {
        const result = { ...defaults };

        for (const namespace in custom) {
            if (!custom.hasOwnProperty(namespace)) continue;

            const customGroup = custom[namespace];
            if (!result[namespace]) {
                result[namespace] = { ...customGroup };
                continue;
            }

            const defaultGroup = result[namespace];
            result[namespace] = { ...defaultGroup }; // –∫–æ–ø–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç—ã

            for (const type in customGroup) {
                if (!customGroup.hasOwnProperty(type)) continue;

                const defaultConfig = defaultGroup[type] || {
                    text: '',
                    delay: 0,
                };
                const customConfig = customGroup[type];

                // –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const merged = {};
                const allFields = new Set([
                    ...Object.keys(defaultConfig),
                    ...Object.keys(customConfig),
                ]);

                for (const field of allFields) {
                    const value = customConfig[field];

                    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–ª—è —Ç–µ–∫—Å—Ç–∞), –±–µ—Ä—ë–º –∏–∑ –¥–µ—Ñ–æ–ª—Ç–∞
                    if (
                        value === undefined ||
                        value === null ||
                        (value === '' && field === 'text')
                    ) {
                        merged[field] = defaultConfig[field];
                    } else {
                        merged[field] = value;
                    }
                }

                result[namespace][type] = merged;
            }
        }

        return result;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –∏–º—ë–Ω –∏ —Ç–∏–ø—É.
     *
     * @param {'in'|'out'} namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω: `'in'` (–≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞), `'out'` (–≤–Ω–µ —á–∞—Ç–∞).
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä `'greeting'`, `'welcome'`.
     * @returns {{ text: string, delay: number, [key: string]: any }} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å `text: ''` –∏ `delay: 0`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
     *
     * @example
     * provider.get('in', 'greeting'); // ‚Üí { text: '–ü—Ä–∏–≤–µ—Ç!', delay: 600 }
     */
    get(namespace, type) {
        return this.messages[namespace]?.[type] || { text: '', delay: 0 };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é sanitizer.
     *
     * @param {'in'|'out'} namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω.
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @returns {string} –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
     *
     * @example
     * provider.getText('out', 'welcome'); // ‚Üí "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç"
     */
    getText(namespace, type) {
        const message = this.get(namespace, type);
        return sanitizeHtml(message.text || '');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
     *
     * @param {'in'|'out'} namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω.
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @returns {number} –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 0.
     *
     * @example
     * provider.getDelay('in', 'followup'); // ‚Üí 15000
     */
    getDelay(namespace, type) {
        const message = this.get(namespace, type);
        return message.delay ?? 0;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *
     * @param {'in'|'out'} namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω.
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {string} field - –ò–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `'duration'`, `'disable'`).
     * @param {*} [defaultValue=undefined] - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.
     * @returns {*} –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     *
     * @example
     * provider.getField('out', 'welcome', 'duration', 5000); // ‚Üí 8000
     * provider.getField('out', 'welcome', 'disable', false); // ‚Üí false
     */
    getField(namespace, type, field, defaultValue = undefined) {
        const message = this.get(namespace, type);
        return message[field] !== undefined ? message[field] : defaultValue;
    }

    /**
     * –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ `'in'`.
     *
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {string} field - –ò–º—è –ø–æ–ª—è.
     * @param {*} [defaultValue=undefined] - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     * @returns {*} –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     *
     * @example
     * provider.getFieldIn('greeting', 'delay'); // ‚Üí 600
     */
    getFieldIn(type, field, defaultValue = undefined) {
        const message = this.get('in', type);
        return message[field] !== undefined ? message[field] : defaultValue;
    }

    /**
     * –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ `'out'`.
     *
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {string} field - –ò–º—è –ø–æ–ª—è.
     * @param {*} [defaultValue=undefined] - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     * @returns {*} –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     *
     * @example
     * provider.getFieldOut('welcome', 'duration'); // ‚Üí 8000
     */
    getFieldOut(type, field, defaultValue = undefined) {
        const message = this.get('out', type);
        return message[field] !== undefined ? message[field] : defaultValue;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º—ë–Ω.
     *
     * @param {'in'|'out'} namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω.
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @returns {boolean} `true`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ `false`.
     * –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–∏–º–µ–µ—Ç `disable: true`), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `false`.
     *
     * @example
     * provider.has('in', 'error'); // ‚Üí true
     * provider.has('out', 'nonexistent'); // ‚Üí false
     */
    has(category, type) {
        const message = this.messages[category]?.[type];
        return !!message && !message.disable;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ `'namespace.type'`.
     *
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ `['in.greeting', 'out.welcome', ...]`.
     *
     * @example
     * provider.listTypes(); // ‚Üí ['in.greeting', 'in.followup', 'out.welcome', ...]
     */
    listTypes() {
        const types = [];
        for (const namespace in this.messages) {
            if (!this.messages.hasOwnProperty(namespace)) continue;
            const group = this.messages[namespace];
            for (const type in group) {
                if (group.hasOwnProperty(type)) {
                    types.push(`${namespace}.${type}`);
                }
            }
        }
        return types;
    }
}
